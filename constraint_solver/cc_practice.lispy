;; require
(define-macro (require cond succ fail)
    (lambda (cond succ fail)
        (if (cond)
            (succ 'done fail)
            (fail)
        )   
    )
)

;; restrict
(define-macro (restrict var choices succ fail)
    `(lambda (,var ,choices ,succ ,fail)
        (if (null? ,choices)
            (fail)
            (begin
                (set! ,var ,(car choices))
                (define (new_fail)
                    (restrict ,var ,succ ,fail ,(cdr choices))
                )
                ;; (<next_function> var succ new_fail)
                ;; (set! fail new_fail)
                (succ 'ok new_fail)
            )
        )
    )
)

;; constrain
(define-macro (constrain &rest exprs)
  (if (null? exprs)
        '(lambda (succ fail) (succ 'done fail))
        `(lambda (succ fail)
            (,(car exprs)
            (lambda (_ fail2)
            ((constrain ,@(cdr exprs)) succ fail2))
            fail))))


;; program
(define (succ val fail) (print val))
(define (fail) (print 'failed))
(define a 'null)
(define b 'null)
(constrain 
    ((restrict a '(2 3))
     (restrict b '(5 6))
     (require (= (+ a b) 9)))
     succ
     fail)
(print `(,a ,b))
