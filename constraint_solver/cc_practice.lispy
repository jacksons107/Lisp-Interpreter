;; require
(define-macro (require cond)
    `(lambda (succ fail)
        (if ,cond
            (succ 'done fail)
            (fail)
        )   
    )
)

;; restrict
(define-macro (restrict var choices)
  `(lambda (succ fail)
     (define (helper choices)
       (if (null? choices)
           (fail)
           (let ((old-val ,var))
             (set! ,var (car choices))
             (succ 'ok
                   (lambda ()
                     (set! ,var old-val)
                     (helper (cdr choices)))))))
     (helper ,choices)))



;; constrain
(define-macro (constrain &rest exprs)
  (if (null? exprs)
        '(lambda (succ fail) (succ 'done fail))
        `(lambda (succ fail)
            (,(car exprs)
                (lambda (_ fail2) ((constrain ,@(cdr exprs)) succ fail2))
                fail))))


;; program
(define (succ val fail) (print val))
(define (fail) (print 'failed))
(define a 'null)
(define b 'null)
(define prog (constrain 
    (restrict a '(2 3))
    (restrict b '(5 6))
    (require (= (+ a b) 9))))
(prog succ fail)
(print `(,a ,b))
