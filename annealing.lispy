;; Partition a list of integers into two subsets such that the difference between
;; the sums of the subsets is minimized using simulated annealing.
;; Ex: 
;;    Given (10 20 15 5 25), the solution is:
;;      (10 20 5) = 35, (15 25) = 40, |35 - 40| = 5.


(define (score part1 part2)
    (abs (- (sum part1) (sum part2)))
)

(define (randlst low high len)
    (define (_randlst low high len acc)
        (if (= len 0)
            acc
            (_randlst low high (- len 1) (cons (randint low high) acc))
        )
    )
    (_randlst low high len '())
)

;; pick a part to be partA and the other to be partB
;; returns a list of the form ((partA) partB) to be unpacked with car and cdr
(define (pick-parts part1 part2)
    (if (bias-flip 50)
        (cons part1 part2)
        (cons part2 part1)
    )
)

;; moves an element from partA to partsA
;; if partA only has one element then swap it with an element in partB
;; returns a list of the form ((partA) partB) to be unpacked with car and cdr
(define (make-new-parts partA partB)
    (if (= (length partA) 1)
        (let ((idx (randint 0 (- (length partB) 1))))
            (let ((val (index idx partB)))
                (cons (cons val '())
                      (+ (slice 0 idx partB) (slice (+ idx 1) (length partB) partB))
                )
            )
        )
        (let ((idx (randint 0 (- (length partA) 1))))
            (let ((val (index idx partA)))
                (cons (+ (slice 0 idx partA) (slice (+ idx 1) (length partA) partA))
                    (cons val partB)
                )   
            )
        )
    )
)

;; returns a bool indicating if the new parts are accepted or not
(define (accept? new_sc0re sc0re temp)
    (if (< new_sc0re sc0re)
        #t
        (let ((acceptance_p (exp (/ (- sc0re new_sc0re) temp))))
            (bias-flip acceptance_p)
        )
    )
)

;; run the simulated annealing simulation and print values when it terminates
(define (run-sim part1 part2 sc0re temp iters)
    (if (or (< temp 8) (> iters 1000))
        (begin
            (print part1)
            (print part2)
            (print sc0re)
            (print temp)
            (print iters)
        )
        (begin
            ;;(print 10000000001)
            (define partsAB (pick-parts part1 part2))
            (define partA (car partsAB))
            (define partB (cdr partsAB))
            ;;(print partA)
            ;;(print partB)

            ;;(print 20000000002)
            (define new_parts (make-new-parts partA partB))
            (define new_part1 (car new_parts))
            (define new_part2 (cdr new_parts))
            ;;(print new_part1)
            ;;(print new_part2)

            ;;(print 30000000003)
            (define new_sc0re (score new_part1 new_part2))

            (if (accept? new_sc0re sc0re temp)
                (run-sim new_part1 new_part2 new_sc0re (- temp 0.1) (+ iters 1))
                (run-sim part1 part2 sc0re temp (+ iters 1))
            )
        )

    )
)

(begin
    ;; initial setup
    (define master_lst (randlst 0 100 10))
    (define part1 (slice 0 5 master_lst))
    (define part2 (slice 5 (length master_lst) master_lst))
    (define sc0re (score part1 part2))
    (define temp 10)
    (print master_lst)
    (print part1)
    (print part2)
    (print sc0re)
    (print temp)

    (run-sim part1 part2 sc0re temp 0)

)
    
